@page "/form";
@page "/form/{IdProducto:int}";

@using ML;
@inject HttpClient Http
@inject NavigationManager navigation;


@if(producto.IdProducto == null){
<form class="form-control">
    @*<DataAnnotationsValidator></DataAnnotationsValidator>*@
    <div class="row">
        <div class="col-md-3">
            <label class="form-label">Nombre producto</label>
            <input type="text" class="form-text" @bind="producto.Nombre"></input>
            @*<ValidationMessage For="@(()=> producto.Nombre)"></ValidationMessage>*@
        </div>

        <div class="col-md-3">
            <label class="form-label">Precio</label>
            <input type="text" class="form-text" @bind="producto.Precio"></input>
            @*<ValidationMessage For="@(()=> producto.Precio)"></ValidationMessage>*@
        </div>


        <div class="col-md-3">
            <label class="form-label">Categoria</label>
            <select class="form-select" @bind="producto.Categorias.IdCategoria">
                <option value="0">--- Seleccionar ---</option>
                @foreach (ML.Categorias categorias in producto.Categorias.Cats)
                {
                    <option value="@categorias.IdCategoria">@categorias.Categoria</option>
                }
            </select>
        </div>


    </div>
    <button type="submit" class="btn btn-success">Guardar</button>
</form>
}else{
<form class="form-control">
    @*<DataAnnotationsValidator></DataAnnotationsValidator>*@
    <div class="row">
        <div class="col-md-3">
            <label class="form-label">Nombre producto</label>
            <input type="text" class="form-text" @bind="producto.Nombre"></input>
            @*<ValidationMessage For="@(()=> producto.Nombre)"></ValidationMessage>*@
        </div>

        <div class="col-md-3">
            <label class="form-label">Precio</label>
            <input type="text" class="form-text" @bind="producto.Precio"></input>
            @*<ValidationMessage For="@(()=> producto.Precio)"></ValidationMessage>*@
        </div>



        <div class="col-md-3">
            <label class="form-label">Categoria</label>
            <select class="form-select" @bind="producto.Categorias.IdCategoria">
                <option value="@producto.Categorias.IdCategoria">@producto.Categorias.Categoria</option>
            </select>
        </div>


    </div>
    <button type="submit" class="btn btn-success" @onclick="@(()=> FormP())">Guardar</button>
</form>
}




@code {
    [Parameter]
    public int? IdProducto { get; set; }

    ML.Producto producto = new ML.Producto();

    protected override void OnInitialized()
    {

        ML.Result result = BL.Categorias.GetAll();
        //producto = new Producto();
        producto.Categorias = new Categorias();
        producto.Categorias.Cats = result.Objects;
        producto.Productoss = new List<object>();
        if (IdProducto > 0)
        {
            producto.Categorias = new Categorias();

            GetById(IdProducto);


        }
        else
        {
            FormP();
        }

    }

    public ML.Result GetById(int? IdProducto)
    {

        //Instancias
        ML.Result result = BL.Categorias.GetAll();


        //Para el update de precargar solo el formulario
        if (IdProducto != null)
        {
            try
            {

                using (var client = new HttpClient())
                {

                    client.BaseAddress = new Uri("http://localhost:5283/api/productos/");
                    var responseTask = client.GetAsync("GetById/" + IdProducto);
                    responseTask.Wait();
                    var resultAPI = responseTask.Result;

                    if (resultAPI.IsSuccessStatusCode)
                    {

                        producto.Categorias.Cats = result.Objects;
                        var readTask = resultAPI.Content.ReadAsAsync<ML.Result>();
                        readTask.Wait();
                        ML.Producto resultItemList = new ML.Producto();
                        resultItemList = Newtonsoft.Json.JsonConvert.DeserializeObject<ML.Producto>(readTask.Result.Object.ToString());
                        result.Object = resultItemList;

                        producto = (ML.Producto)result.Object;
                        result.Correct = true;

                    }
                    else
                    {
                        result.Correct = false;
                        result.ErrorMessage = "No existen registros en la tabla Departamento";

                    }

                }

            }
            catch (Exception ex)
            {
                result.Correct = false;
                result.ErrorMessage = ex.Message;

            }


        }

        else
        {
            //Sino trae nada pues entonces solo se llenaran las listas y los demas campos estaran
            //en blanco y esto es en cierta parte para que se muestre  form de agregar
            producto.Categorias.Cats = result.Objects;


        }
        return result;
    }
    public bool FormP()
    {
        if (producto.IdProducto == 0)
        {

            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://localhost:5283/api/productos/");
                var task = client.PostAsJsonAsync<Producto>("Add/", producto);
                task.Wait();

                var taskResult = task.Result;
                if (taskResult.IsSuccessStatusCode)
                {
                    return  true;
                  
                }
                else
                {
                    return  false;
                }
            }
        }
        else
        {
            using (var client = new HttpClient())
            {
                producto.IdProducto = null;
                client.BaseAddress = new Uri("http://localhost:5283/api/productos/");
                var task = client.PutAsJsonAsync($"Update/{IdProducto}" , producto);
                task.Wait();

                var taskResult = task.Result;
                if (taskResult.IsSuccessStatusCode)
                {
                    return  true;
                }
                else
                {
                    return  false;
                }
            }
        }
       
    }








}